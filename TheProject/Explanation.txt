This Python script performs the following steps:

1. **Define File Paths:** It starts by defining the path to your folder of images (`path = './images'`). And two dictionaries, `seen_files_dic` to keep track of seen files and the line numbers, and `duplicates_dic` to store duplicates and the line numbers they're found.

2. **Read Files Data:** Next, it opens and reads from the 'files.csv' file. Each row in the 'files.csv' file is read and stored as a list in `all_rows`.

3. **Look for Duplicates:** It loops through `all_rows`, for each row, it checks if the file (the path without the "images/" prefix) exists in the file folder; if not, moves to the next row. If the file does exist, it checks whether we've seen this filename before (seen_files_dic). If we haven't, we put it in `seen_files_dic` along with the line number. If we have seen it before, we put it in `duplicates_dic` along with the line number.

4. **Write Duplicates to CSV:** Then it opens 'duplicates.csv' file in write mode. It starts by writing the headers "Duplicate File" and "Line Number". Then it goes through each item in `duplicates_dic`, writing the filename and line number of each duplicate to 'duplicates.csv'.

5. **Create Clean CSV:** Lastly, it creates a new CSV file 'no_duplicates.csv'. It writes each row from `all_rows` to this new file, except for the rows that are in `duplicates_dic`.

Note:

`ntpath.basename(full_file_directory)` is used to extract filename from full file path.

`newline=''` is used with `open()` function, to avoid additional new lines in CSV. In windows, newline (`\n`) is represented with a combination of carriage return and line feed `\r\n`, when writing using csv writer it adds newline after each write operation this causes additional newlines in file. Specifying `newline=''` in `open()` causes python to use `\n` for newlines.

This script helps keep the 'files.csv' file clean by isolating duplicates and creating a new CSV file without them.